#!/usr/bin/env node

const fs = require('fs-extra');
const path = require('path');
const shelljs = require('shelljs');
const getSwaggerSpecFromJSDoc = require('../lib');
const chokidar = require('chokidar');
const jsonServer = require('json-server');

/**
 * Parse Commands
 */
const program = require('commander');
program
  .option('-w, --watch', 'Whether or not to listen for continous changes.')
  .option('-m, --mock', 'Whether or not to exec the shell by vukoa-mock')
  .option('-b, --openBrowser', 'Whether or not to open default browser to show the doc.')
  .parse(process.argv);

/**
 * Execute Task
 */

/**
 * swaggerSpecDir:   swagger Specification 的文件夹位置 
 * swaggerSpecName:  swagger Specification 文件的名称和文件类型
 * basicSpec:        swagger Specification 的基本信息
 * mockPath:         生成依赖的文件夹位置
 * root:             项目根目录
 * apis:             包含swagger specification 信息的项目文件列表（包含在jsDoc形式的信息中）
 */
const swaggerSpecName = 'swaggerSpec.json';
let {mockPath, basicSpec, root, controller: apis, port} = global.vukoaConfig = require('../config/resolve')();

// root,controller字段假定是必填且正确的，暂时不校验

// todo: 检查mockPath的可用性
// ？更新到 global.vukoaConfig
if(!mockPath) 
  mockPath = './mock';

const swaggerSpecDir = path.resolve(root, mockPath);

if(!basicSpec) {
  basicSpec = {
    info: { 
      title: 'Hello World', 
      version: '1.0.0', 
      description: 'A sample API', 
    },
    basePath: '/', 
  };
}

if (!basicSpec.hasOwnProperty('info')) {
  console.log('Definition file should contain an info object!');
  return console.log('More at http://swagger.io/specification/#infoObject');
}

// Check for title and version properties in the info object.
if (!basicSpec.info.hasOwnProperty('title') ||
!basicSpec.info.hasOwnProperty('version')
) {
  console.log('The title and version properties are required!');
  return console.log('More at http://swagger.io/specification/#infoObject');
}

/**
 * Creates a swagger specification from a basicSpec and a set of files.
 * @function
 * @param {object} basicSpec - The basic swagger specification object.
 * @param {array} apis -  List of files to extract documentation from.
 * @param {array} dir - the dir of output file.
 */
function createSpecification(basicSpec, apis, dir) {
  // Options for the swagger docs
  const options = {
    // Import swaggerDefinitions
    swaggerDefinition: basicSpec,
    // Path to the API docs
    apis: apis,
  };

  // Initialize swagger-jsdoc -> returns validated JSON or YAML swagger spec
  let swaggerSpec = JSON.stringify(getSwaggerSpecFromJSDoc(options), null, 2);

  if(program.mock) 
    console.log(JSON.stringify(swaggerSpec));

  fs.ensureDir(dir).then(() => {
    fs.writeFile(path.join(dir, swaggerSpecName), swaggerSpec, (err) => {
      if (err) 
        throw err;
      
      if(!program.mock) {
        if(program.openBrowser) {
          // 这里是通过puer启动一个本地服务，通过查看index.html文件
          // 如果本地没有装过puer的，暂时就没办法看了。。。
          // todo: 集成到项目的webpack配置中
          const dir = path.resolve(root, mockPath);
          shelljs.exec(`puer -d ${dir}`);
        }

        console.log('Swagger specification is ready.');
      }
    });
  });
  // fs.ensureDirSync(dir);
  // fs.writeFileSync(path.join(dir, swaggerSpecName), swaggerSpec);
}

// If watch flag is turned on, listen for changes.
if (program.watch) {
  const watcher = chokidar.watch(apis, {
    awaitWriteFinish: {
      stabilityThreshold: 2000,
      pollInterval: 100,
    },
  });

  watcher.on('ready', function startMessage() {
    console.log('Listening for changes ...');
  });

  watcher.on('change', function detectChange(path) {
    console.log('Change detected in ' + path);
  });

  watcher.on('error', function catchErr(err) {
    return console.error(err);
  });

  watcher.on('all', function regenerateSpec() {
    createSpecification(basicSpec, apis, swaggerSpecDir);
  });
}
// Just create the specification.
else {
  createSpecification(basicSpec, apis, swaggerSpecDir);
}